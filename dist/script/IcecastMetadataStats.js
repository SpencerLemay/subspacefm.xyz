/**
 * @license
 * @see https://github.com/eshaz/icecast-metadata-js
 * @copyright 2021 Ethan Halsall
 *  This file is part of icecast-metadata-stats.
 *
 *  icecast-metadata-stats free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  icecast-metadata-stats distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <https://www.gnu.org/licenses/>
 */
import{IcecastReadableStream}from"icecast-metadata-js";const noOp=()=>{},STOPPED="stopped",RUNNING="running",FETCHING="fetching",p=new WeakMap,icyController=Symbol(),icyFetchStatus=Symbol(),oggController=Symbol(),oggFetchStatus=Symbol(),icestatsEndpoint=Symbol(),icestatsController=Symbol(),icestatsFetchStatus=Symbol(),statsEndpoint=Symbol(),statsController=Symbol(),statsFetchStatus=Symbol(),nextsongsEndpoint=Symbol(),nextsongsController=Symbol(),nextsongsFetchStatus=Symbol(),sevenhtmlEndpoint=Symbol(),sevenhtmlController=Symbol(),sevenhtmlFetchStatus=Symbol(),streamEndpoint=Symbol(),icyMetaInt=Symbol(),icyCharacterEncoding=Symbol(),icyDetectionTimeout=Symbol(),sources=Symbol(),interval=Symbol(),onStats=Symbol(),onStatsFetch=Symbol(),state=Symbol(),intervalId=Symbol(),fetchStats=Symbol(),getStreamMetadata=Symbol();export default class IcecastMetadataStats{constructor(t,e={}){const s=t.split("/").slice(0,-1).join("/");p.set(this,{[streamEndpoint]:t,[icestatsEndpoint]:e.icestatsEndpoint||`${s}/status-json.xsl`,[statsEndpoint]:e.statsEndpoint||`${s}/stats`,[nextsongsEndpoint]:e.nextsongsEndpoint||`${s}/nextsongs`,[sevenhtmlEndpoint]:e.sevenhtmlEndpoint||`${s}/7.html`,[sources]:e.sources||[],[interval]:1e3*(e.interval||30),[onStats]:e.onStats||noOp,[onStatsFetch]:e.onStatsFetch||noOp,[icyMetaInt]:e.icyMetaInt,[icyCharacterEncoding]:e.icyCharacterEncoding,[icyDetectionTimeout]:e.icyDetectionTimeout,[icyController]:new AbortController,[oggController]:new AbortController,[icestatsController]:new AbortController,[statsController]:new AbortController,[nextsongsController]:new AbortController,[sevenhtmlController]:new AbortController,[state]:STOPPED})}static xml2Json(t){const e=t=>{if(!t.children.length)return Number.isNaN(Number(t.innerHTML))?t.innerHTML:Number(t.innerHTML);const s={};for(const n of t.children)n.nodeName in s?Array.isArray(s[n.nodeName])?s[n.nodeName].push(e(n)):s[n.nodeName]=[s[n.nodeName],e(n)]:s[n.nodeName]=e(n);return s};return e((t=>(new DOMParser).parseFromString(t,"application/xml"))(t))}get state(){return p.get(this)[state]}get icestatsEndpoint(){return p.get(this)[icestatsEndpoint]}get statsEndpoint(){return p.get(this)[statsEndpoint]}get nextsongsEndpoint(){return p.get(this)[nextsongsEndpoint]}get sevenhtmlEndpoint(){return p.get(this)[sevenhtmlEndpoint]}start(){p.get(this)[state]===STOPPED&&(p.get(this)[state]=RUNNING,this.fetch().then(p.get(this)[onStats]),p.get(this)[intervalId]=setInterval((()=>{this.fetch().then(p.get(this)[onStats])}),p.get(this)[interval]))}stop(){p.get(this)[state]!==STOPPED&&(p.get(this)[state]=STOPPED,clearInterval(p.get(this)[intervalId]),p.get(this)[icyController].abort(),p.get(this)[oggController].abort(),p.get(this)[icestatsController].abort(),p.get(this)[statsController].abort(),p.get(this)[sevenhtmlController].abort())}async fetch(){if(p.get(this)[state]!==FETCHING){const t=p.get(this)[state];p.get(this)[state]=FETCHING,p.get(this)[onStatsFetch](p.get(this)[sources]);const e=[];p.get(this)[sources].includes("icestats")&&e.push(this.getIcestats()),p.get(this)[sources].includes("sevenhtml")&&e.push(this.getSevenhtml()),p.get(this)[sources].includes("stats")&&e.push(this.getStats()),p.get(this)[sources].includes("nextsongs")&&e.push(this.getNextsongs()),p.get(this)[sources].includes("icy")&&e.push(this.getIcyMetadata()),p.get(this)[sources].includes("ogg")&&e.push(this.getOggMetadata());const s=await Promise.all(e).then((t=>t.reduce(((t,e)=>({...t,...e})),{})));return p.get(this)[state]=p.get(this)[state]!==FETCHING?p.get(this)[state]:t,s}}async getIcestats(){return this[fetchStats]({status:icestatsFetchStatus,endpoint:icestatsEndpoint,controller:icestatsController,mapper:t=>t.json()}).then((t=>({icestats:t&&t.icestats})))}async getSevenhtml(){return this[fetchStats]({status:sevenhtmlFetchStatus,endpoint:sevenhtmlEndpoint,controller:sevenhtmlController,mapper:async t=>(await t.text()).match(/(.*?)<\/body>/gi).map((t=>{const e=t.match(/(<body>|,)(?<stats>.*)<\/body>/i).groups.stats.split(",");return 7===e.length?{StreamTitle:e[6],currentListeners:parseInt(e[4]),peakListeners:parseInt(e[2]),maxListeners:parseInt(e[3]),bitrate:parseInt(e[5]),status:parseInt(e[1]),serverListeners:parseInt(e[0])}:{StreamTitle:e[4],currentListeners:parseInt(e[2]),peakListeners:parseInt(e[0]),maxListeners:parseInt(e[1]),bitrate:parseInt(e[3])}}))}).then((t=>({sevenhtml:t})))}async getStats(){return this[fetchStats]({status:statsFetchStatus,endpoint:statsEndpoint,controller:statsController,mapper:async t=>IcecastMetadataStats.xml2Json(await t.text()).SHOUTCASTSERVER.STREAMSTATS}).then((t=>({stats:t})))}async getNextsongs(){return this[fetchStats]({status:nextsongsFetchStatus,endpoint:nextsongsEndpoint,controller:nextsongsController,mapper:async t=>IcecastMetadataStats.xml2Json(await t.text()).SHOUTCASTSERVER.NEXTSONGS}).then((t=>({nextsongs:t})))}async getIcyMetadata(){return this[getStreamMetadata]({status:icyFetchStatus,endpoint:streamEndpoint,controller:icyController,metadataType:"icy",headers:{"Icy-MetaData":1}})}async getOggMetadata(){return this[getStreamMetadata]({status:oggFetchStatus,endpoint:streamEndpoint,controller:oggController,metadataType:"ogg"})}async[getStreamMetadata]({status:t,endpoint:e,controller:s,headers:n,metadataType:a}){return this[fetchStats]({status:t,endpoint:e,controller:s,headers:n,mapper:async t=>new Promise((e=>{new IcecastReadableStream(t,{onMetadata:({metadata:t})=>{p.get(this)[s].abort(),e(t)},onMetadataFailed:()=>{p.get(this)[s].abort(),e()},metadataTypes:a,icyMetaInt:p.get(this)[icyMetaInt],icyCharacterEncoding:p.get(this)[icyCharacterEncoding],icyDetectionTimeout:p.get(this)[icyDetectionTimeout]}).startReading()}))}).then((t=>({[a]:t})))}async[fetchStats]({status:t,endpoint:e,controller:s,mapper:n,headers:a={}}){if(!p.get(this)[t])return p.get(this)[t]=!0,fetch(p.get(this)[e],{method:"GET",headers:a,signal:p.get(this)[s].signal}).then((t=>{if(!t.ok)throw new Error(`HTTP Error ${t.status}`);return t})).then(n).catch((t=>{"AbortError"!==t.name&&console.warn(`Failed to fetch ${p.get(this)[e]}`,t)})).finally((()=>{p.get(this)[t]=!1,p.get(this)[s]=new AbortController}))}}